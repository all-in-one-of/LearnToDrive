<?xml version="1.0" encoding="utf-8"?>
<Octopus>
  <ColorProperties>
    <MouseOver A="255" R="234" G="107" B="17" />
    <IconProperties IconHueShift="26" IconSaturation="1" />
  </ColorProperties>
  <ShapeProperties roundness="11" width="110" height="24" buttonTextSize="12" iconSize="16" />
  <LayoutProperties xPosMod="0.75" yPosMod="2" radiusMod="120" CRMod="0" />
  <BehaviorProperties onHold="False" />
  <OctopusTemplate>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="Polygon.png" rightIcon="None" iconOnly="False" buttonText="Edit Poly">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>ModPanel.AddModToSelection( Edit_Poly() )</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="False" type="1" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command></Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="connect.png" rightIcon="None" iconOnly="False" buttonText="Connect">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>macros.run "Ribbon - Modeling" "ConnectEdgesOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="True" type="1" XIntensity="0.1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="True" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>max modify mode -- Ensure we are in the modifier panel
currentMod = ModPanel.GetCurrentObject() -- Get the current modifier

segs = Abs ({2} as float) -- Never have less than 1 segment

pinch = {0} as float
if pinch &lt; -100 then pinch = -100
else if 100 &lt; pinch then pinch = 100

slide = -({1} as float)
if slide &lt; -100 then slide = -100
else if 100 &lt; slide then slide = 100

if ClassOf(currentMod) == Edit_Poly then
(
	currentMod.connectEdgePinch = pinch
	currentMod.connectEdgeSegments = segs
	currentMod.connectEdgeSlide = slide
	currentMod.ButtonOp #ConnectEdges
)
else
(
	edges = polyop.getEdgeSelection $
	$.connectEdgePinch = pinch
	$.connectEdgeSegments = segs
	$.connectEdgeSlide = slide
	PolyOp.setEdgeSelection $ edges
	$.ConnectEdges()
)

redrawViews();</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="aaa.png" rightIcon="None" iconOnly="False" buttonText="Weld">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>macros.run "Ribbon - Modeling" "EPoly_WeldOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="True" type="1" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>max modify mode
DisableSceneRedraw()
currentMod = ModPanel.GetCurrentObject()

amount = abs ({0} as float)

if ClassOf(currentMod) == Edit_Poly then
(
	currentMod.weldVertexThreshold = amount
	currentMod.ButtonOp #WeldVertex
)
else
(
	$.weldThreshold = amount
	PolyOp.WeldVertsByThreshold $ (PolyOp.GetVertSelection $)
)

EnableSceneRedraw()
redrawViews() </Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="Inset.png" rightIcon="None" iconOnly="False" buttonText="Inset">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>macros.run "Ribbon - Modeling" "EPoly_InsetOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="True" type="1" XIntensity="0.1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="True" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="0" WheelMax="1000">
        <Command>max modify mode
currentMod = ModPanel.GetCurrentObject()

segs = abs {2}
amount = (({0} as float) / segs)

if segs &lt; 1 then -- Outline
(
	if ClassOf(currentMod) == Edit_Poly then
	(
		currentMod.outlineAmount = -( {0} as float )
		currentMod.ButtonOp #Outline
	)
	else
	(
		$.outlineAmount = -( {0} as float )
		$.EditablePoly.Outline()
	)
)
else -- Inset
(
	DisableSceneRedraw()

	for i = 1 to segs do
	(
		if ClassOf(currentMod) == Edit_Poly then
		(
			currentMod.insetAmount = amount 
			currentMod.ButtonOp #Inset
		)
		else
		(
			PolyOp.extrudeFaces $ (polyop.getFaceSelection $) 0.0
			$.outlineAmount = -amount 
			$.EditablePoly.Outline()
		)
	)

	EnableSceneRedraw()
)

redrawViews()</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="smooth60.png" rightIcon="None" iconOnly="False" buttonText="SmGroups">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>macros.run "Ribbon - Modeling" "SmoothingGroupsDialog"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="True" type="1" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>max modify mode
currentMod = ModPanel.GetCurrentObject()

amount = {0} as float

if ClassOf(currentMod) == Edit_Poly then
(
	currentMod.autoSmoothThreshold = amount
	currentMod.ButtonOp #AutoSmooth
)
else
(
	$.autoSmoothThreshold = amount
	PolyOp.AutoSmooth $
)

redrawViews() </Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="extrude.png" rightIcon="None" iconOnly="False" buttonText="Extrude">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>macros.run "Ribbon - Modeling" "EPoly_ExtrudeOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="True" type="1" XIntensity="0.1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="True" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="0" WheelMax="1000">
        <Command>max modify mode
DisableSceneRedraw()

try
(
	currentMod = ModPanel.GetCurrentObject()

	if {1} &lt; -100 then $.extrusionType = 0
	else if {1} &gt; -100 and {1} &lt; 100 then $.extrusionType = 1
	else $.extrusionType = 2

	segs = amax(#( (Abs ({2} as float)), 1))
	height = (({0} as float) / segs)
	width = (({1} as float) / segs)

	for i = 1 to segs do
	(
		if ClassOf(currentMod) == Edit_Poly then
		(	
			selectionLevel = currentMod.GetEPolySelLevel()

			if selectionLevel == #Face then
			(
				Print "face"
				currentMod.extrudeFaceHeight = height
				currentMod.extrudeFaceType = 1
				currentMod.ButtonOp #ExtrudeFace
			)
			else if selectionLevel == #Edge then
			(
				currentMod.extrudeEdgeHeight = height
				currentMod.extrudeEdgeWidth = width
				currentMod.ButtonOp #ExtrudeEdge
			)
			else if selectionLevel == #Vertex then
			(
				currentMod.extrudeVertexHeight = height
				currentMod.extrudeVertexWidth = width
				currentMod.ButtonOp #ExtrudeVertex
			)
		)
		else
		(
			selectionLevel = $.GetEPolySelLevel()
			$.extrusionType = 1
			
			if selectionLevel == #Face then
			(
				PolyOp.ExtrudeFaces $ (polyop.getFaceSelection $) (height)
			)
			else if selectionLevel == #Edge then
			(
				-- Put something here
			)
			else if selectionLevel == #Vertex then
			(
				-- Put something here
			)
		)
	)
)
catch
(
	Print "Base type not Editable_Poly"
)

EnableSceneRedraw()
redrawViews()</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="sphere.png" rightIcon="None" iconOnly="False" buttonText="DblSmooth">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>if (selection.count &gt; 0) then
(
	max modify mode; --open panel
	modPanel.AddModToSelection (TurboSmooth()) ui:on;
		
	local turbo = modPanel.GetCurrentObject();
		
	--smoothing group smooth
	turbo.iterations = 3;
	turbo.sepBySmGroups = true;
		
	modPanel.AddModToSelection (TurboSmooth()) ui:on;
)</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="False" type="1" XIntensity="0.0025" YIntensity="1" XStepping="0.01" YStepping="1" isXAdaptive="True" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="0" WheelMax="1000">
        <Command></Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="chamfer.png" rightIcon="None" iconOnly="False" buttonText="Chamfer">
      <ActionData active="True" type="0" XIntensity="1" YIntensity="1" XStepping="1" YStepping="1" isXAdaptive="False" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="-1000" WheelMax="1000">
        <Command>macros.run "Ribbon - Modeling" "EPoly_ChamferOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
      <ActionData active="True" type="1" XIntensity="0.05" YIntensity="0.01" XStepping="0.1" YStepping="0.5" isXAdaptive="True" isYAdaptive="False" XMin="-100000" XMax="100000" YMin="-100000" YMax="100000" WheelMin="0" WheelMax="1000">
        <Command>max modify mode
DisableSceneRedraw()
currentMod = ModPanel.GetCurrentObject()

segs = abs {2}
tension = 1.0 - (({1} as float) / 10.0)
type = 1
amount = {0}

if ClassOf(currentMod) == Edit_Poly then
(
	selectionType = currentMod.GetEPolySelLevel()

	currentMod.chamferEdgeAmount = amount
	currentMod.chamferEdgeOpen = false
	currentMod.edgeChamferSegments = segs

	if selectionType == #Edge then
	(
		currentMod.ButtonOp #ChamferEdge
	)
	else if selectionType == #Face then
	(
		currentMod.ConvertSelectionToBorder #Face #Edge
		currentMod.ButtonOp #ChamferEdge
	)
	else if selectionType == #Vertex then
	(
		currentMod.chamferVertexAmount = amount
		currentMod.chamferVertexOpen = false
		currentMod.ButtonOp #ChamferVertex
	)
)
else
(
	selectionType = $.GetEPolySelLevel()

	$.edgeChamferSegments = segs
	$.edgeChamferTension = tension
	$.edgeChamferType = type

	if selectionType == #Edge then
	(
		PolyOp.ChamferEdges $ (PolyOp.GetEdgeSelection $) (amount)
	)
	else if selectionType == #Face then
	(
		$.EditablePoly.ConvertSelectionToBorder #Face #Edge
		PolyOp.ChamferEdges $ (PolyOp.GetEdgeSelection $) (amount)
	)
	else if selectionType == #Vertex then
	(
		PolyOp.ChamferVerts $ (PolyOp.GetVertSelection $) (amount)
	)
)

EnableSceneRedraw()
redrawViews() </Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <CommandIsChecked></CommandIsChecked>
      </ActionData>
    </OctopusProperties>
  </OctopusTemplate>
  <OctopusIcons>
    <OctopusIcon leftIconName="Polygon.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAIGNIUk0AAHolAACAgwAA+f8AAIDp
AAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAA5SURBVFhH7c6xEQAw
CAMx7780IUsAhYr3uVQqqc1OAf6f7BqgdzQAAAAAAAAAAAAAAIB7gKWWAakH/NaV9zqnBSwAAAAA
SUVORK5CYIIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="connect.png">
      <leftIcon>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</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="aaa.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAIGNIUk0AAHolAACAgwAA+f8AAIDp
AAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFkSURBVDhPpVNLSwJh
FL1/pJWLaBEIs21lo6PZLsJNBC2jlbSNsrIsi6BNi0gSF7notawkSOxhOAXaE5IeElRIRbVoe7pf
foriyCgeODDz3XvP3HO/OwSgKRoeNkIBq3uOfpyzBHugQGeQ1v8jdUJxcXH8uwMnnx5kvrzYSnuh
Bigm46ZQXEHC2ith9Z6wckM4yw8hqg8IkWeZI2BxjFO8a54KfZfB2s0WRBfqNGE0RghdE5Iv/Yic
9gpLTzJPcXBOKjsJdaZapIh2u5/exoTIBSGR60HoyI1OFuZu4NskhA8IenYBNn6XNVVQ+pZa4Nuh
38VDtqUTIilmkp8TbHGfxXcJl4/L0Ni6rKlAUwJt6gTdNmqh1TlFGY0HZPMTRvb4K1cVQ8zJvJpD
LO3B8YcH5+9e6PnB4jWW70LNayztQfiBeUfYTg+L4qiMm8KisbLoQuPWBFlwQ8bMYfSDNELDw/oJ
+gM44bCkMSnEWwAAAABJRU5ErkJggg==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="Inset.png">
      <leftIcon>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</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="smooth60.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAABGdBTUEAALGPC/xhBQAABDtJREFU
WEftlltMHFUYx5e57JzZuSy7U1h2u1eWwLI77MLCAnIrxLQmxheb0AcTjYmJPlAefaiWXTA+GDX1
SZta08Y29qEgLdCWSitINbTi3gLIJW1DoGmIlspWaitF+DxrT0J8Njvxob/ky2TmP8n/f2a+OfPp
nvGM/0qA51mJpsmZhpQaDPSHHk/DbCh08ojd3kIua0NYlrnxurr3/2pr+xWammC2ouJciygKRM49
VoTykvX1H8HevQDNzQCRyMYpp/MVImtDp9NZnGltndtqaYGN2lpYDAQmDxiNNiLnHkRRuv5g8C38
BDaf4ACZUGi71+3uUmg6j9ySe/YrijkTiYxBXR1AZSWs+HxLHSaTSmRtOOrxvLgViaxnA2z5/XDd
4TjuZ1mWyLknbDBwN/z+LzdwgMc4wB9e74OPzeZ9RNaGt4uKKlcCgeUHPh888nphxmYb2YdQPpFz
jwnvhENud+w+DrCGA6w5HJtfmExvateNmAOybJspLo6vejyw7nDAjMUytR8hF5G14ZjF8vpvbveT
jN0Od4qK4ITR2FNAUdo9iFael5M22/Da7t2waLFAUlFWDvJ8LZG1IWY0Pn/Xas3MFRbCLUWBy7L8
VRlF6Ymce0oYhhlUlGNzBQVw02yGKaNx/RBCLxFZG17l+fK42XzrtskEM7IMVwRhrImmTUTOPTyu
k5J0aDo/f3tKkmBCEDY/4LhO9FTWhhdY1vKtJP2YeBoAriI0/zJNe4msDYcRasfmjycNBriOEBxl
2U8KdTqKyLknTNNiL0LnJ3gefsABLun1q2/QdDOR/02P11s7Vl3dfSUcjg5XVUVHqqp6vgmFuodU
NToYCHRf9Pl6+kpKYgMeT/Rrp/O9Prs92me1Rs8WFsZOK0rshMl0GG88XZ9JUtfngtD9qcEQO4JQ
9DRCg9cQ2r7McTCs18Mphpl4jaLqiO0O51X14HZbG+A5DzZbW+ERHrX+bGyEh/hf/3skAplwGFaD
QbiP/3i/lJbCEt7zl10uWMbb7rzVCrP4u5/F330ad34ad/6kKMI1/O7H8epH8OoHsHk/y8IQw8C7
FNVJbHc4U1rasdHQABv19f/UQzzlrNXUwBo2xtMO3FNVuFdeDnex+UpxMSxi8wW85S7YbDCPzRd2
7YJpbD5pNEK28W5g8+/xux/F5mN49RdxgEs4wDAO8A5FdRDbHY67XO13gsHE7YqK5JKqpm6qanLO
70/8XF6emi4rS6VLStJxjyeedLnSP9ntyQmrNTlusaTHCgpS3ylKajQ/Pz4qy8mropi6IAiJfp6P
DyCUPMdxiT69PnWWZRO9DJM6Q9PJDopqJ7Y7+DiO2SMI4h5RlLLHJlKNgiA142rkeSmCkNCCkPQc
QmKE48QalpWqcdUwTLbEBoaRceMJVRQlZitMUVJlXp6ISwrhY7YqdDrRqdNpNzH9z9Hp/gYy+YFQ
BgyFHAAAAABJRU5ErkJggg==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="extrude.png">
      <leftIcon>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
bnMAcQAAAABJRU5ErkJggg==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="sphere.png">
      <leftIcon>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
OgHSgB1fJgAAAABJRU5ErkJggg==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="chamfer.png">
      <leftIcon>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</leftIcon>
    </OctopusIcon>
  </OctopusIcons>
</Octopus>
<?xml version="1.0" encoding="utf-8"?>
<Octopus>
  <ColorProperties>
    <MouseOver A="255" R="234" G="112" B="18" />
    <IconProperties IconHueShift="0" IconSaturation="1" />
  </ColorProperties>
  <ShapeProperties roundness="11" width="110" height="24" />
  <LayoutProperties xPosMod="0.75" yPosMod="2" radiusMod="120" CRMod="0" />
  <OctopusTemplate>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="Polygon.png" rightIcon="None" iconOnly="False" buttonText="Edit Poly">
      <ActionData active="True" type="0">
        <Command>ModPanel.AddModToSelection( Edit_Poly() )</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="False" type="1">
        <Command></Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="connect.png" rightIcon="None" iconOnly="False" buttonText="Connect">
      <ActionData active="True" type="0">
        <Command>macros.run "Ribbon - Modeling" "ConnectEdgesOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="True" type="1">
        <Command>max modify mode -- Ensure we are in the modifier panel
currentMod = ModPanel.GetCurrentObject() -- Get the current modifier

segs = Abs ({2} as float) -- Never have less than 1 segment

pinch = {0} as float
if pinch &lt; -100 then pinch = -100
else if 100 &lt; pinch then pinch = 100

slide = -({1} as float)
if slide &lt; -100 then slide = -100
else if 100 &lt; slide then slide = 100

if ClassOf(currentMod) == Edit_Poly then
(
	currentMod.connectEdgePinch = pinch
	currentMod.connectEdgeSegments = segs
	currentMod.connectEdgeSlide = slide
	currentMod.ButtonOp #ConnectEdges
)
else
(
	edges = polyop.getEdgeSelection $
	$.connectEdgePinch = pinch
	$.connectEdgeSegments = segs
	$.connectEdgeSlide = slide
	PolyOp.setEdgeSelection $ edges
	$.ConnectEdges()
)

redrawViews();</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>0.25</XIntensity>
        <YIntensity>0.25</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="aaa.png" rightIcon="None" iconOnly="False" buttonText="Weld">
      <ActionData active="True" type="0">
        <Command>macros.run "Ribbon - Modeling" "EPoly_WeldOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="True" type="1">
        <Command>max modify mode
DisableSceneRedraw()
currentMod = ModPanel.GetCurrentObject()

amount = abs ({0} as float)

if ClassOf(currentMod) == Edit_Poly then
(
	currentMod.weldVertexThreshold = amount
	currentMod.ButtonOp #WeldVertex
)
else
(
	$.weldThreshold = amount
	PolyOp.WeldVertsByThreshold $ (PolyOp.GetVertSelection $)
)

EnableSceneRedraw()
redrawViews() </Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>0.1</XIntensity>
        <YIntensity>0.1</YIntensity>
        <XStepping>0.1</XStepping>
        <YStepping>0.1</YStepping>
        <isXAdaptive>True</isXAdaptive>
        <isYAdaptive>True</isYAdaptive>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="Inset.png" rightIcon="None" iconOnly="False" buttonText="Inset">
      <ActionData active="True" type="0">
        <Command>macros.run "Ribbon - Modeling" "EPoly_InsetOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="True" type="1">
        <Command>max modify mode
currentMod = ModPanel.GetCurrentObject()

segs = abs {2}
amount = (({0} as float) / segs)

if segs &lt; 1 then -- Outline
(
	if ClassOf(currentMod) == Edit_Poly then
	(
		currentMod.outlineAmount = -( {0} as float )
		currentMod.ButtonOp #Outline
	)
	else
	(
		$.outlineAmount = -( {0} as float )
		$.EditablePoly.Outline()
	)
)
else -- Inset
(
	DisableSceneRedraw()

	for i = 1 to segs do
	(
		if ClassOf(currentMod) == Edit_Poly then
		(
			currentMod.insetAmount = amount 
			currentMod.ButtonOp #Inset
		)
		else
		(
			PolyOp.extrudeFaces $ (polyop.getFaceSelection $) 0.0
			$.outlineAmount = -amount 
			$.EditablePoly.Outline()
		)
	)

	EnableSceneRedraw()
)

redrawViews()</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>0.1</XIntensity>
        <YIntensity>0.1</YIntensity>
        <XStepping>0.05</XStepping>
        <YStepping>0.05</YStepping>
        <isXAdaptive>True</isXAdaptive>
        <isYAdaptive>True</isYAdaptive>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="smooth60.png" rightIcon="None" iconOnly="False" buttonText="SmGroups">
      <ActionData active="True" type="0">
        <Command>macros.run "Ribbon - Modeling" "SmoothingGroupsDialog"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="True" type="1">
        <Command>max modify mode
currentMod = ModPanel.GetCurrentObject()

amount = {0} as float

if ClassOf(currentMod) == Edit_Poly then
(
	currentMod.autoSmoothThreshold = amount
	currentMod.ButtonOp #AutoSmooth
)
else
(
	$.autoSmoothThreshold = amount
	PolyOp.AutoSmooth $
)

redrawViews() </Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="extrude.png" rightIcon="None" iconOnly="False" buttonText="Extrude">
      <ActionData active="True" type="0">
        <Command>macros.run "Ribbon - Modeling" "EPoly_ExtrudeOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="True" type="1">
        <Command>max modify mode
DisableSceneRedraw()

try
(
	currentMod = ModPanel.GetCurrentObject()

	if {1} &lt; -100 then $.extrusionType = 0
	else if {1} &gt; -100 and {1} &lt; 100 then $.extrusionType = 1
	else $.extrusionType = 2

	segs = amax(#( (Abs ({2} as float)), 1))
	height = (({0} as float) / segs)
	width = (({1} as float) / segs)

	for i = 1 to segs do
	(
		if ClassOf(currentMod) == Edit_Poly then
		(	
			selectionLevel = currentMod.GetEPolySelLevel()

			if selectionLevel == #Face then
			(
				Print "face"
				currentMod.extrudeFaceHeight = height
				currentMod.extrudeFaceType = 1
				currentMod.ButtonOp #ExtrudeFace
			)
			else if selectionLevel == #Edge then
			(
				currentMod.extrudeEdgeHeight = height
				currentMod.extrudeEdgeWidth = width
				currentMod.ButtonOp #ExtrudeEdge
			)
			else if selectionLevel == #Vertex then
			(
				currentMod.extrudeVertexHeight = height
				currentMod.extrudeVertexWidth = width
				currentMod.ButtonOp #ExtrudeVertex
			)
		)
		else
		(
			selectionLevel = $.GetEPolySelLevel()
			$.extrusionType = 1
			
			if selectionLevel == #Face then
			(
				PolyOp.ExtrudeFaces $ (polyop.getFaceSelection $) (height)
			)
			else if selectionLevel == #Edge then
			(
				-- Put something here
			)
			else if selectionLevel == #Vertex then
			(
				-- Put something here
			)
		)
	)
)
catch
(
	Print "Base type not Editable_Poly"
)

EnableSceneRedraw()
redrawViews()</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>0.5</XIntensity>
        <YIntensity>0.5</YIntensity>
        <XStepping>0.05</XStepping>
        <YStepping>0.05</YStepping>
        <isXAdaptive>True</isXAdaptive>
        <isYAdaptive>True</isYAdaptive>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="sphere.png" rightIcon="None" iconOnly="False" buttonText="DblSmooth">
      <ActionData active="True" type="0">
        <Command>if (selection.count &gt; 0) then
(
	max modify mode; --open panel
	modPanel.AddModToSelection (TurboSmooth()) ui:on;
		
	local turbo = modPanel.GetCurrentObject();
		
	--smoothing group smooth
	turbo.iterations = 3;
	turbo.sepBySmGroups = true;
		
	modPanel.AddModToSelection (TurboSmooth()) ui:on;
)</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="False" type="1">
        <Command></Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
    </OctopusProperties>
    <OctopusProperties isActive="True" previewMode="False" leftIcon="chamfer.png" rightIcon="None" iconOnly="False" buttonText="Chamfer">
      <ActionData active="True" type="0">
        <Command>macros.run "Ribbon - Modeling" "EPoly_ChamferOptions"</Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>1</XIntensity>
        <YIntensity>1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>1</YStepping>
        <isXAdaptive>False</isXAdaptive>
        <isYAdaptive>False</isYAdaptive>
      </ActionData>
      <ActionData active="True" type="1">
        <Command>max modify mode
DisableSceneRedraw()
currentMod = ModPanel.GetCurrentObject()

segs = abs {2}
tension = 1.0 - (({1} as float) / 10.0)
type = 1
amount = {0}

if ClassOf(currentMod) == Edit_Poly then
(
	selectionType = currentMod.GetEPolySelLevel()

	currentMod.chamferEdgeAmount = amount
	currentMod.chamferEdgeOpen = false
	currentMod.edgeChamferSegments = segs

	if selectionType == #Edge then
	(
		currentMod.ButtonOp #ChamferEdge
	)
	else if selectionType == #Face then
	(
		currentMod.ConvertSelectionToBorder #Face #Edge
		currentMod.ButtonOp #ChamferEdge
	)
	else if selectionType == #Vertex then
	(
		currentMod.chamferVertexAmount = amount
		currentMod.chamferVertexOpen = false
		currentMod.ButtonOp #ChamferVertex
	)
)
else
(
	selectionType = $.GetEPolySelLevel()

	$.edgeChamferSegments = segs
	$.edgeChamferTension = tension
	$.edgeChamferType = type

	if selectionType == #Edge then
	(
		PolyOp.ChamferEdges $ (PolyOp.GetEdgeSelection $) (amount)
	)
	else if selectionType == #Face then
	(
		$.EditablePoly.ConvertSelectionToBorder #Face #Edge
		PolyOp.ChamferEdges $ (PolyOp.GetEdgeSelection $) (amount)
	)
	else if selectionType == #Vertex then
	(
		PolyOp.ChamferVerts $ (PolyOp.GetVertSelection $) (amount)
	)
)

EnableSceneRedraw()
redrawViews() </Command>
        <CommandPre></CommandPre>
        <CommandPost></CommandPost>
        <XIntensity>0.5</XIntensity>
        <YIntensity>0.1</YIntensity>
        <XStepping>1</XStepping>
        <YStepping>0.005</YStepping>
        <isXAdaptive>True</isXAdaptive>
        <isYAdaptive>True</isYAdaptive>
      </ActionData>
    </OctopusProperties>
  </OctopusTemplate>
  <OctopusIcons>
    <OctopusIcon leftIconName="Polygon.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAIGNIUk0AAHolAACAgwAA+f8AAIDp
AAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAApSURBVDhPY/jPwPCf
EgwzAESTg6EGAI0gC48aMGoACI8agGQA2ZjhPwBJ3aV3/aX/tQAAAABJRU5ErkJgggAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="connect.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAA1hJREFU
OE91kn9M1GUcx58YKCPsD/5guzZisDGuLWFrjHn9Qba1VuQo5CQgYY3goDPujoMTdnhEZwiMUFIQ
1NSOIcSpS/AISDilBPkRB3THDgMaHY5MyRhkm9F89fW4jf6o13/P83xe7+d5PvuIf+Pv7y92RkQE
7BdCdjgrK/5yqyXH2Xu5+d71S/191lZdfHz8dl/pFuHh4X56faH8XFPD3ltdHVWea1dtf6nV8+Tn
r+OefExPNTSEw+DnDycGeg4nJiY+41M3yczMjFxZWnQz0rGBJRWsGhjug+xsOHAApoahuwKaAqWQ
xo0744MWtVod5tOFkBJl7inHIg+WoD0LTgqwHYLpW5CTAyoVTN6Er6W909JZ30ds/OS0m83mF7wB
CQkJIcPnj7nW5n6A+7eh5WU4IxXapafPjEN6OuTlgvt7KehLmLPDH/e4PePqUSgUwSI2Njaov75s
xHNCumltBTxDYImSvpIECwNSyBS8uhu0Gv50TeC53onrtIm+k9UTcXFxO0RkZGRAV53pm/nSEH6/
VAs8gr8fwPpd+HWRVecYd7TvMZ+agLuxnOnCQCa0T9NZZxqMjo7eLkJDQ/3aqss63Aef4255MI9G
bTx02LnfnMey+UU8zQbmde/iznwDZ4NJkgWjmme5UGOyymQyPxEUFCROmUsbpw3Ps1QmWLO3s9Jr
YfmQ4GejYKGxiFlVGk7l6zg+MzJaILipkXOm0nQuJCTkKW8j64xF5nFDPAslgpWuZn6xnfXK89J6
9ngRzgwlk0mJjNbqGVILbmhiOGosrPLKTyjIy93zbU3BurtYsHzxGEvdFm/YrEHgqi/EkbKXsTcT
Gar8gMF8wTWNgsqDOqNPFyJCGt/mqorj0x+/xWLLJyxc/YInYU69wPGpjtF9SQylJjFoVtGvEvRq
d1Oc/362T99EqUyJ7j9VMzPXUsWP3W2bsk4wJj17OEOSs95moCKHXt0rfGUuWM3dn7bHp25hKjHs
m+5sXXNdseDQbvM2bLhKw42U1+jJVK621deMVRRrSzPS0l6KiooK9GlbyOXybdb2tvOTNisj5cmP
7bX63y4ePfLdEcUuQ0ZYWFxsTMyOgIAAX/X/kJycHH62qfFEZVnJh+nvpO6UJjXYd/QfCPEPRIoJ
oW3VuqMAAAAASUVORK5CYII=</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="aaa.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAIGNIUk0AAHolAACAgwAA+f8AAIDp
AAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAFkSURBVDhPpVNLSwJh
FL1/pJWLaBEIs21lo6PZLsJNBC2jlbSNsrIsi6BNi0gSF7notawkSOxhOAXaE5IeElRIRbVoe7pf
foriyCgeODDz3XvP3HO/OwSgKRoeNkIBq3uOfpyzBHugQGeQ1v8jdUJxcXH8uwMnnx5kvrzYSnuh
Bigm46ZQXEHC2ith9Z6wckM4yw8hqg8IkWeZI2BxjFO8a54KfZfB2s0WRBfqNGE0RghdE5Iv/Yic
9gpLTzJPcXBOKjsJdaZapIh2u5/exoTIBSGR60HoyI1OFuZu4NskhA8IenYBNn6XNVVQ+pZa4Nuh
38VDtqUTIilmkp8TbHGfxXcJl4/L0Ni6rKlAUwJt6gTdNmqh1TlFGY0HZPMTRvb4K1cVQ8zJvJpD
LO3B8YcH5+9e6PnB4jWW70LNayztQfiBeUfYTg+L4qiMm8KisbLoQuPWBFlwQ8bMYfSDNELDw/oJ
+gM44bCkMSnEWwAAAABJRU5ErkJggg==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="Inset.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAA01JREFU
OE+Fk2tM01cYh/9uTDM/LH6BsPBBCAkDgmRjIF/2YaNZHFu2RQ0yLnOsAqLCspUUtM5SBYsESbtx
6bSkXFRELJWL3Ap2XKsCAwLZuAxhKm6M6zopCBs8++Oa7MvcnuTNSc77O7/3nDfvEZ6Fv7//C8ky
mW/FtXKpQa//MDg4eJsj9WwCAwO3pcjlu2qulibes9RUrnden2bFtsFIu/1+Z9MVdUbG666urlsc
8r/x9fV1SkmR+9SXlyY9aq1qpPXSDKYTG1yQgDkHnixCaRiUH4JB88+9zXVfxsTEuDqOC4JarX7n
iW1hmh4j6F4VxR+BtQRmx4FVMdahrxJK3oYLLqJpxjpj3b3Xyy6HhYSEbBdUiuPvzgxY17AvwIQV
/vhNrDoHYxaoU0B3KWwsiT7i/rfnwRQPI02w8vtycXFRspB4OG73ZMHn9sWuWrGaiO0nqIiEQgH0
Ymyu1YliQjTZZPYhkz0ddOnPkamQnxIORkf5DOcnL/xapsY+PgT2eTGmoFEOtcdgtAEWH/D4/hjf
W9vozFPSluRDs0yCIunIUWHfvr07v8s/+WiqMJVF601WDQkwJ96CP+HxLDNDPQwa1Nw5LqGrWEtr
upRb8YLo/8F68tHDkYJEInHp0p0ZnzAWIPaCJV005O1hbbSXId0J+uW+dCcJWBN30H6pgOa0T2iM
FbiZGrYWezB6jxAUFPSSudrUN3y3k6n+28wP97NyOQVbXysDZyO4+9nLWFURtF/MouVGBeYSHXWy
UEzyA0vh+/cGCm5ubs/nazXpA4bMlQnVG0xbjCw9GGfh3jDd35zmdkURbTVGWopyaVTFUl/4FVUl
esrOn5l7LzTU++ks+Pn5vajLyVL+cPHU8sO0XcybNEyPDHKnoZp2g4Zbiv00xblQJxWoSgjCqElf
zdVq6sXxdnlqsImXl9fWvOxzstGSzKVfVK8wZblBhzpObJgTZvHN9Udew6SMX85XpTYkSGPCAwIC
djiO/oOHh4dTbnbWsR+vahcnWyqxKKNoSgqmShln056UXYuXfvq+t7f3dof83xF78tzXOdmx/daO
mVrt6YWCs2llH0dGvOnu7r7VIfl/nJ2dt8hkX7wVFX5gt6en5398Y0H4C1iuHVvh8lPKAAAAAElF
TkSuQmCC</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="smooth60.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAIGNIUk0AAHolAACAgwAA+f8AAIDp
AAB1MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAACxIAAAsSAdLdfvwAAAGLSURBVDhPY/j//z9F
GC94tqWI+++xOksgZocKEQ0YtZVE2b4eqCr5f6L+zb/jdSFQcaIBExDzHJqR4AzU/Ozf8fozf4/X
iUOkiAMgA7g52FgkX+8o7QO64g/QoFIgDZElErACsVB7lrPR76O154GabwINUYNIEQcYgZgLiMXv
rs3LBxrwC2hAPzBAWcCyRAKQYgE/W3Xl74eqdwINeQc0xAEiRRwAuYIDiEVPz0+NABrwEWjAZmCA
coNliQTMQMynKisk+3lf5TKgId+BhkRBpIgHoIQksqk7whVo+2OgAafIiVYeFmYmyZfbSzqArgBF
axUwQBkY7AzlmYApzvDn4RpPIPYAYjck7A7CPw5Ve73ZWep7ZVlm2M1VOYVAza+AhjwEukKTwcNS
hRuoaD1Q4DcQ/0LCP5HYIDlk/B9oyDWgPmUGUQEugYtLMqKfbCpsfLypsOHRxoJaIF0HwiA2BIP5
9Q82FNQD00TN081FVW93lYX05rmBvAZOLAJALEgkBqkFRSMwjTAwAADkvBkbm5KwuQAAAABJRU5E
rkJggg==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="extrude.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAnVJREFU
OE+9km1Ik1EYhh8mSlQI+yMlSAtFQ4IKKwSTKRZaaEUZlSzSH1Jp+3KSTEwba/iBpNN3bZNwamYa
SmAF5UxTlqZTbDanpbMyF5rhV9oXsrtXfX8UWPTLC244h/Nc5zkcHlp3BAIBj1v+P0FBQR4KhSLw
adMTidNuM+p0OmFwcLAHd7w2fD6fRCLRltuVFfHOvq4qDHWO4lnlAsxG4NPw1OigXSuTybZz5at4
so87ujeQr2dKYmzmB9rxvhf2qea6cWdp6kPLZb9Mpyau81tzFfDhJeD+AavV2rgiRgXQJk0M7bek
0NUv+Xu64Wj5jskhfK1KnzQnU4FLm1iLnvsuzLncS/MzGHP0w1pf7q43lTVRwzm6OK+m5yimOegI
K9H7Ah3lwOw7wNW/hMVpzE58hKPtMdqZHNSmHEF1Uuii6UZuDVkl1IyiZYmLgcvyRQ3XMN5rQUtt
Bcyq5J/MicBWpdB/RhwXDZP4NPQFGoYaE6luIpstLmVjZFNCWLhOcGYQ+nMOo9tUiMKzUQPycIE6
YRcJmVM72+pVUtQU573PkEtFdDeByoevEKZyCDMqwjArDigINjmhJysa7TfV06pDXmn688I7jbnp
rgZDkS1PrcqOjY0N8PHx4ZHxJOXbWeGtkjDCyo50tjMr90oJ3ZkH0VGpdZt1ms91ZYwlS6lMjoyM
3Mrj/TZL4jCKar9EI2/YVwyy8kpnCaFLTGhVRExXG0rvyeWyYyEhId6c8iee7DxJwiiiI5Vev0pb
lVsu0NiteDIk7d0Q6r/Nz4sr/TvLAyQ9QOHshz5ijlPWmd20w9eb/j2qa7HPjzZv9OQ26wPRLzWV
SZ6Vgn9lAAAAAElFTkSuQmCC</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="sphere.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAsRJREFU
OE+NUltI03EU/v6bbm46p+Ul0Rxb3tFpiNfopmn6kJc0CGGkBV5QI0dTJ2HkFklkvogSElKoBEVG
ZGURYcgeBgZWhIUE9dBD9hBUkPRw+nbpoRt04IM/v3O+75zznT/+FpsA3XYgvRIoPwBU7gRyTIAx
mP536ICQHUBtN3B/FFifBr7dBDZuAJ8mAG8r0E6h6GD5rxEBhFcAw/3A50uAzBGPVSrxhobKU8LL
7wXguxu4lQskBmmBUAOqPMDVwYILJM4Q99Rq8URFyYrJJKsZGfIyIcEv9IC5U8D0ViAySPfPVFrN
kR1McnSZVRS5q9eLh8TXjY3yvq1N1srKZCUuTpY4CRtsHASa/WQVoFiAcT5ILzFCTFFgzmCQxfx8
Wevulo9ut6w1NclySoo84RT0RfqAR7GAHmF01wosN/DRTpwlJigwq9PJndRU8dTUyLPmZvGWl8ti
YqIshITINdacAT6kA6nYDCQUAG/r+NhFnCZ8U0yycMZolDmzWeYzM2U+KUluh4fLdYpfZn4A+MLG
hYinwN6gwDEmHdzRRYwQ4zRySquVq/RjRqORK3ybDDZgs6+pQJHv79DvBzwNLLaxQ1dEhDhJGAoL
k2HuO0rSGIXHSPIZPEw4iUbgDT0InHOXogw0k3Q0OVnaLRax83TO+HgZ5BmH6IWL4txZBgnfpVoI
rj0dyh/PL5CmKNtaIiOfn8jKEkdJifQWF0tfbq6cpImO2FhxcCo7RTo5iY3kfTRwC7DHT/4ZuzWa
2h6LZX2I93ZVV8tgZaU4SkulJztbWjlNC1c6TAGuu5EGOH3nD1IDwXMq+wyGQ/0FBS8u1tfL+bo6
cVdVSW9RkXRwpSMUqFOUdznAcT2gDdL+jByj0WyzWp32wsKHjry81U6T6ZXNYFiqUKnO0XUrf/v/
ixi1WmtSqaLNanUM3dYF3Po9gB9A6xAXyscGOwAAAABJRU5ErkJggg==</leftIcon>
    </OctopusIcon>
    <OctopusIcon leftIconName="chamfer.png">
      <leftIcon>iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAABGdBTUEAALGPC/xhBQAAAxlJREFU
OE99kmtME1YYho8zbktIzH6YhbnJj2XGxITEhDnMGOpcZmK6kIhNXM3YWIEOCkwUYcK0qANi4i1m
M04ExMaVmRQp2BYGlEJbq9Qi0QpuXooOQVy4GfBShD4eaU1cQniT8+ec73m/7z3niNkUFRX1hlqt
jtKXHd/iazJVtddW705OTl4cOp1D0dHRb/6yp2iN12mvGB/6r5eO2ilOKKCuKPj4qtNjqKrcFBsb
+1a4/P9SqVSLL7kcVeOXm0cx6uCWB549Am8t/P4JlH8BzvKJ/o7W06UlxSvklPPCaAjusVvrn7cZ
CN6/Cf6rUPMz2MukyQiM9IJFmh5fCMZU6LH1+y60lSQlJb0rIiIiRJO5fi+Dfmj8FU6nhLo/GQVH
BZzVwIAPmIRuM5gy4ZoJJoaDVrP5hEhMTIzst1T5aNfD0zG42wn6r6HzHExNwL3L8MdmuFQJgRGC
A3e47W7FfUxHWXGhQeh0us/HerzPqNsP5uKZIp4MwvkCaNgDQzJSYBj6bvCP4TCuAgXtWR/Rol3G
4YKco6K48KeEQad5avJhH7j/hNodIQOmoaMcei8wdN2DZ58Kl1Zg/0HQKldT9ipKdmTvErvzczfe
rtBNj9XJ/CMP4KYLqreAr0aawHinDU/eStyZAkeGwKYR/JUqsG5dR742LU3kaNPXd1mNk30tRh4b
S2F0AAZvQLOMc78b72twU1oItqgF9bkJwW0ZGpVQKBRLzJXHnH+7WnjosREwStDvlblH+ddu4qKE
29IFzRJulHBDisD0ncCYqwyov/3my1f/YLlFf7LV73Uz7OsgeEo+XbcTz6EfZzq3yLEbJWiVneu+
j8SoiQ2Wpazr2hC3ctmMwUsplcqlljMVlntX3Dy65WNYXpwjb23owmR3S+oHmPKU06eKtnflZ6Tm
fvbxiiVvL5gfpsOScd5vOHmkZsBlxe9xYMv4kMb0pZzfqZqq3JfflZetzYyLi4sMl8+uhK8U7zUc
3Gm4bjMHraVbA/oDe93bs7Sa+Pj4ucHXtX71p4t+O3KoMCdLuzkmJuad8PYsEuIFOLgoWSNOWy8A
AAAASUVORK5CYII=</leftIcon>
    </OctopusIcon>
  </OctopusIcons>
</Octopus>